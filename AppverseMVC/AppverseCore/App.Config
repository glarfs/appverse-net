<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="castle" type="Castle.Windsor.Configuration.AppDomain.CastleSectionHandler,Castle.Windsor"/>
    <section name="hibernate-configuration" type="NHibernate.Cfg.ConfigurationSectionHandler, NHibernate"/>
    
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=4.4.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false"/>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler,Log4net"/>
  </configSections>

  <castle>
    <facilities>
      <facility id="event.wiring" type="Castle.Facilities.EventWiring.EventWiringFacility, Castle.Facilities.EventWiring"/>
      <!-- The only way to reuse the app.config configuration file -->
      <!--<facility
        id="logging"
        type="Castle.Facilities.Logging.LoggingFacility, Castle.Facilities.Logging"
        loggingApi="custom"
        customLoggerFactory="Appverse.Core.Interceptors.Log.Log4NetFactory" 
        />-->  
    <facility id="logging" type="Castle.Facilities.Logging.LoggingFacility, Castle.Facilities.Logging" loggingApi="log4net" configFile="log4net.Config"/>
    </facilities>
    <components>
      <!--Interceptors-->
      <component id="LogInterceptor" service="Appverse.Core.Interceptors.LogInterceptor, Appverse.Core.Interceptors" type="Appverse.Core.Interceptors.LogInterceptor, Appverse.Core.Interceptors" lifestyle="singleton">
        <parameters>
          <LogInputParameters>true</LogInputParameters>
          <LogResult>true</LogResult>
          <LogProfiling>true</LogProfiling>
          <LogExceptions>true</LogExceptions>        
        </parameters>
      </component>        

      <!--LogInterceptor also can intercept and log exceptions -->
      <component id="ExceptionInterceptor" service="Appverse.Core.Interceptors.ExceptionInterceptor, Appverse.Core.Interceptors" type="Appverse.Core.Interceptors.ExceptionInterceptor, Appverse.Core.Interceptors" lifestyle="singleton">
      </component>
      
      <component id="TransactionInterceptor" service="Appverse.Core.Interceptors.TransactionInterceptor, Appverse.Core.Interceptors" type="Appverse.Core.Interceptors.TransactionInterceptor, Appverse.Core.Interceptors" lifestyle="singleton">
                <parameters>
          <WriteToLog>true</WriteToLog>
        </parameters>
      
      </component>

      <!-- Cache Provider-->
      <component id="CacheProvider" service="Appverse.Core.Interceptors.Cache.ICacheProvider, CastleApp" type="Appverse.Core.Interceptors.Cache.ObjectCacheProvider, CastleApp" lifestyle="singleton">
      </component>
      
      <!-- Cache Interceptor-->
      <component id="CacheInterceptor" service="Appverse.Core.Interceptors.CacheInterceptor, CastleApp" type="Appverse.Core.Interceptors.CacheInterceptor, CastleApp" lifestyle="singleton">
        <parameters>
          <cachingIsEnabled>true</cachingIsEnabled>
          <cacheTimeoutSeconds>60</cacheTimeoutSeconds>
          <cacheProvider>${CacheProvider}</cacheProvider>
          <logCacheHits>true</logCacheHits>        
        </parameters>
      </component>
      
      <!-- Sample of class with operations that can be cached-->
      <component id="OperationsThatCanBeCached" service="UtilsLibrary.IOperationsThatCanBeCached, UtilsLibrary" type="UtilsLibrary.OperationsThatCanBeCached, UtilsLibrary" lifestyle="singleton">
        <interceptors>
          <interceptor>${LogInterceptor}</interceptor>
          <interceptor>${CacheInterceptor}</interceptor>
        </interceptors>
      </component>

      <!-- Sample of event wiring facility. This class has a method that is called by an event of other class-->
      <component id="NotificationListener" service="UtilsLibrary.INotification, UtilsLibrary" type="UtilsLibrary.Notification, UtilsLibrary" lifestyle="singleton">
        <interceptors>
          <interceptor>${LogInterceptor}</interceptor>
        </interceptors>
      </component>
      
      <!-- Sample of event wiring facility. This class has an event and calls a method of class defined in subscribers node-->
      <component id="Operation" service="UtilsLibrary.IOperations, UtilsLibrary" type="UtilsLibrary.Operations, UtilsLibrary" lifestyle="singleton">
        <interceptors>
          <interceptor>${LogInterceptor}</interceptor>
        </interceptors>
        <subscribers>
                <subscriber id="NotificationListener" event="Changed" handler="OnSendMail"/>
        </subscribers>
      </component>
      <component id="StartObjectId" type="CastleApp.StartObject, CastleApp" lifestyle="singleton">
        <interceptors>
          <interceptor>${LogInterceptor}</interceptor>
          <interceptor>${CacheInterceptor}</interceptor>
        </interceptors>
      </component>
    </components>
  </castle>
<startup><supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5.1"/></startup></configuration>
